#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <ctime>
#include <windows.h>

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
class Character {
protected:
    std::string name;
    int health;
    int attackPower;

public:
    Character(std::string n, int h, int ap) : name(n), health(h), attackPower(ap) {}

    virtual void attack(Character &target) {
        std::cout << name << " –∞—Ç–∞–∫—É–µ—Ç " << target.getName() << " –∏ —Å–Ω–æ—Å–∏—Ç –µ–º—É " << attackPower << " –•–ü!" << std::endl;
        target.takeDamage(attackPower);
    }

    virtual void takeDamage(int damage) {
        health -= damage;
        if (health <= 0) {
            health = 0;
            std::cout << name << " –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!" << std::endl;
        }
    }

    bool isAlive() const {
        return health > 0;
    }

    std::string getName() const {
        return name;
    }

    virtual ~Character() {}
};

// –ö–ª–∞—Å—Å –∏–≥–æ—Ä—å–∫–∞
class Player : public Character {
public:
    Player(std::string n) : Character(n, 100, 20) {}

    void attack(Character &target) override {
        std::cout << name << " (–∏–≥–æ—Ä—ë–∫) –∞—Ç–∞–∫—É–µ—Ç " << target.getName() << " –∏ —Å–Ω–æ—Å–∏—Ç –µ–º—É " << attackPower << " –•–ü!" << std::endl;
        target.takeDamage(attackPower);
    }
};

// –ö–ª–∞—Å—Å –≤—Ä–∞–≥–∞
class Enemy : public Character {
public:
    Enemy(std::string n, int h, int ap) : Character(n, h, ap) {}

    void attack(Character &target) override {
        std::cout << name << " (–≤—Ä–∞–≥) –∞—Ç–∞–∫—É–µ—Ç " << target.getName() << " –∏ —Å–Ω–æ—Å–∏—Ç –µ–º—É " << attackPower << " –•–ü!" << std::endl;
        target.takeDamage(attackPower);
    }
};

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
class Item {
protected:
    std::string itemName;

public:
    Item(std::string name) : itemName(name) {}

    virtual void use(Player &player) = 0;

    std::string getName() const {
        return itemName;
    }

    virtual ~Item() {}
};

// –ö–ª–∞—Å—Å –∏—Å—Ü–µ–ª—è—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
class HealingPotion : public Item {
private:
    int healingAmount;

public:
    HealingPotion(std::string name, int amount) : Item(name), healingAmount(amount) {}

    void use(Player &player) override {
        std::cout << player.getName() << " –∏—Å–ø–æ–ª—å–∑—É–µ—Ç " << itemName 
                  << ", –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è " << healingAmount << " –•–ü!" << std::endl;
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
class Inventory {
private:
    std::vector<Item*> items;

public:
    void addItem(Item* item) {
        items.push_back(item);
    }

    void useItem(Player &player, const std::string &itemName) {
        for (auto item : items) {
            if (item->getName() == itemName) {
                item->use(player);
                return; 
            }
        }
        std::cout << player.getName() << ", —É —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!" << std::endl;
    }

    ~Inventory() {
        for (auto item : items) {
            delete item;
        }
    }
};

// –ö–ª–∞—Å—Å –∏–≥—Ä—ã
class Game {
private:
    Player player;
    std::vector<Enemy> enemies;
    Inventory inventory;

public:
    Game(std::string playerName) : player(playerName) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–æ–≤
        enemies.push_back(Enemy("ü§¨", 30, 10));
        enemies.push_back(Enemy("üò§", 50, 15));
        enemies.push_back(Enemy("ü•∂", 100, 25));

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        inventory.addItem(new HealingPotion("–ú–∞–ª–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", 20));
        inventory.addItem(new HealingPotion("–ë–æ–ª—å—à–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", 50));
    }

    void start() {
        for (auto &enemy : enemies) {
            while (player.isAlive() && enemy.isAlive()) {
                player.attack(enemy);
                if (enemy.isAlive()) {
                    enemy.attack(player);
                }
            }
            if (!player.isAlive())
                break;
            std::cout << "\n";
        }

        if (player.isAlive()) {
            std::cout << player.getName() << ", —Ç—ã –ø–æ–±–µ–¥–∏–ª!" << std::endl;
        } else {
            std::cout << player.getName() << ", —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!" << std::endl;
        }
        // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ Game
    }

    ~Game() {}
};

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
class GameStateManager {
private:
    Game* currentGame;

public:
    void startNewGame(const std::string& playerName) {
        currentGame = new Game(playerName);
        currentGame->start();
        delete currentGame; // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    }
};

int main() {
    SetConsoleOutputCP(CP_UTF8);

    GameStateManager gameStateManager;
    
    gameStateManager.startNewGame("üòé");
    
    return 0;
}
